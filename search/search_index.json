{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"DSA Study Plan","text":"<p>Data Structures and Algorithms (DSA) is a fundamental concept in computer science that involves the study and implementation of various ways to organize and manipulate data in a computer program. It covers the implementation and analysis of data structures such as arrays, linked lists, stacks, queues, trees, and graphs, as well as the design and analysis of algorithms for sorting, searching, and other operations on these data structures. Understanding DSA is essential for building efficient and scalable software systems, as it allows developers to make  informed decisions about which data structures and algorithms to use for a given problem, and how to optimize their performance.</p> <p>This document is ment for:</p> <ol> <li>Develop a strong understanding of fundamental data structures and algorithms, such as arrays, linked lists, stacks, queues, trees, and graphs.</li> <li>Learn how to analyze the time and space complexity of algorithms, and understand how to optimize them for better performance.</li> <li>Understand how to implement common algorithms for sorting, searching, and other operations on data structures.</li> <li>Learn how to apply data structures and algorithms to solve real-world problems, such as searching large datasets, optimizing network routing, and solving computational problems in science and engineering.</li> <li>Document my learning process by creating this website to demonstrate my understanding of DSA concepts and my ability to apply them to solve problems.</li> </ol>"},{"location":"cpp_Input_and_Output/","title":"C++ Input & Output","text":""},{"location":"cpp_Input_and_Output/#introduction","title":"Introduction","text":"<p>In C++, basic input and output can be achieved using the standard input/output library, which includes the following function:</p> <ul> <li><code>cin</code> (standard input) - reads input from the keyboard.</li> <li><code>cout</code> (standard output) - writes output to the screen.</li> <li><code>cerr</code> (standard error) - writes error messages to the screen.</li> </ul>"},{"location":"cpp_Input_and_Output/#cpp-output","title":"cpp Output","text":"<p>In C++, <code>cout</code> sends formatted output to standard output devices, such as the screen. We use the <code>cout</code> object along with the <code>&lt;&lt;</code> operator for displaying output.</p> <p>Example 1.1.1:</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main() {\n// prints the string enclosed in double quotes\ncout &lt;&lt; \"Hello World!\";\nreturn 0;\n}\n</code></pre> <p>Output:</p> <pre><code>Hello World!\n</code></pre> <p>Note: if we don't include the <code>using namespace std;</code> statement, we need to use <code>std::cout</code> instead of <code>cout</code>. This is the preferred method as using the <code>std</code> namespace can create potential problems.</p> <p>To print the numbers and character variables, we use the same <code>cout</code> object but without using quotation marks.</p> <p>Example 1.1.2:</p> <pre><code>#include &lt;iostream&gt;\nint main() {\nint num1 = 40;\ndouble num2 = 956.280;\nchar ch = 'D';\nstd::cout &lt;&lt; num1 &lt;&lt; endl;  // print integer\nstd::cout &lt;&lt; num2 &lt;&lt; endl;  // print double\nstd::cout &lt;&lt; \"character: \" &lt;&lt; ch &lt;&lt; endl;  // print character\nreturn 0;\n}\n</code></pre> <p>Output:</p> <pre><code>40\n956.280\ncharacter: D\n</code></pre> <p>Notes: - The <code>endl</code> manipulator is used to insert a new line. That's why each output is displayed in a new line. - The <code>&lt;&lt;</code> operator can be used more than once if we want to print different variables, strings and so on in a single statement.</p>"},{"location":"cpp_Input_and_Output/#cpp-input","title":"cpp Input","text":"<p>In C++, <code>cin</code> takes formatted input from standard input devices such as the keyboard. We use the <code>cin</code> object along with the <code>&gt;&gt;</code> operator for taking input.</p> <p>Example 1.1.3:</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main() {\nint num;\ncout &lt;&lt; \"Enter an integer: \";\ncin &gt;&gt; num;  // Taking input\ncout &lt;&lt; \"The number is: \" &lt;&lt; num;\nreturn 0;\n}\n</code></pre> <p>Output:</p> <pre><code>Enter an integer: 40\nThe number is: 40\n</code></pre> <p>In the program we used <code>cin &gt;&gt; num;</code> to take input from the user. The input is stored in the variable <code>num</code>. We then use the <code>&gt;&gt;</code> operator with <code>cin</code> to take input.</p>"},{"location":"cpp_Input_and_Output/#taking-multiple-inputs","title":"Taking Multiple Inputs","text":"<p>Example 1.1.4:</p> <pre><code>#include &lt;iostream&gt;\nint main() {\nchar a;\nint num;\nstd::cout &lt;&lt; \"Enter a character and an integer: \";\nstd::cin &gt;&gt; a &gt;&gt; num;\nstd::cout &lt;&lt; \"Character: \" &lt;&lt; a &lt;&lt; std::endl;\nstd::cout &lt;&lt; \"Number: \" &lt;&lt; num;\nreturn 0;\n}\n</code></pre> <p>Output:</p> <pre><code>Enter a character and an integer: A\n29\nCharacter: A\nNumber: 29\n</code></pre>"},{"location":"cpp_Input_and_Output/#cpp-files-io","title":"cpp Files I/O","text":"<p>C++ provides a standard library called <code>fstream</code> (file stream) that contains classes for working with files.</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;fstream&gt;\n</code></pre> <p>There are three classes included in the <code>fstream</code> library, which are used to create, write or read files:</p> Class Description <code>ofstream</code> Creates and writes to files <code>ifstream</code> Reads from files <code>fstream</code> A combination of <code>ofstream</code> and <code>ifstream</code>: creates, reads, and writes to files"},{"location":"cpp_Input_and_Output/#create-and-write-to-a-file","title":"Create and Write to a File","text":"<p>To create a new file or overwrite an existing file, you can use the <code>ofstream</code> class.</p> <p>Syntax:</p> <pre><code>#include &lt;fstream&gt;\n...\nofstream outfile;\noutfile.open(\"filename.txt\")\n</code></pre> <p>This creates a new file named \"filename.txt\" or overwrites an existing file with that name. You can then use the <code>&lt;&lt;</code> operator or the <code>write()</code> method to write data to the file.</p> <p>Example 1.1.5:</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;fstream&gt;\nint main(){\n// Create an ofstream object\nstd::ofstream outputFile(\"output.txt\");\n// Write data to the file\noutputFile &lt;&lt; \"Writing this text to the file\" &lt;&lt; std::endl;\noutputFile &lt;&lt; \"This is another line of text\" &lt;&lt; std::endl;\n// Close the file\noutputFile.close();\nstd::cout &lt;&lt; \"Data has been written to the file\" &lt;&lt; std::endl;\nreturn 0;\n}\n</code></pre> <p>This code:</p> <ul> <li>Creates an object of the <code>ofstream</code> class called <code>outputFile</code>, wich is used to open file called \"output.txt\" in the current directory.</li> <li>The code then uses the <code>outputFile</code> object to write some text to the file, and then closes the file.</li> </ul>"},{"location":"cpp_Input_and_Output/#read-a-file","title":"Read a File","text":"<p>To read data from an existing file, you can use the <code>ifstream</code> class.</p> <p>Syntax:</p> <pre><code>#include &lt;fstream&gt;\n...\nifstream infile;\ninfile.open(\"filename.txt\")\n</code></pre> <p>You can then use the <code>&gt;&gt;</code> operator or the <code>read()</code> method to read data from the file.</p> <p>Once you are done working with a file, you should close it using the <code>close()</code> method. This releases any resources that were associated with the file and ensures that any changes you made to the file are saved.</p> <p>It's also worth mentioning that you can check if the file is open or not by checking the <code>is_open()</code> method on the file stream variable.</p> <pre><code>if(outfile.is_open()) {\n// file is open and ready for operations\n}\n</code></pre> <p>You can also use <code>ios::app</code> flag to open a file in append mode, wich allows you to add data to the end of an existing file without overwriting it.</p> <p>Example 1.1.6:</p> <p>First, create the file \"input.txt\" and place your input like this:</p> <pre><code>This is string\nC\n23\n723.8\n</code></pre> <p>Then we write our program:</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;fstream&gt;\n#include &lt;string&gt;\nint main(){\n// Create an ifstream object\nstd::ifstream inputFile(\"input.txt\");\n// Check if the file could be opened\nif (!inputFile) {\nstd::cout &lt;&lt; \"Error opening file\" &lt;&lt; std::endl;\nreturn 1;\n}\n// Read data from the file\nstd::string line;\nwhile (std::getline(inputFile, line)) {\nstd::cout &lt;&lt; line &lt;&lt; std::endl;\n}\n// Close the file\ninputFile.close();\nreturn 0;\n}\n</code></pre> <p>Output:</p> <pre><code>This is string\nC\n23\n723.8\n</code></pre> <p>This code:</p> <ul> <li>Creates an object of the <code>ifstream</code> class called <code>inputFile</code>, which is used to open a file called \"input.txt\" in the current directory.</li> <li>The code then uses an \"if\" statement to check if the file could be opened successfully.<ul> <li>If the file could not be opened, the code prints an error message.</li> </ul> </li> <li>The code then uses a while loop to read each line of the file using the <code>getline</code> function and the <code>inputFile</code> object, and it prints each line on the screen.</li> <li>Finally, the code closes the file.</li> </ul> <p>Note: Notice that we included a library named <code>&lt;string&gt;</code> wich is necessary for the <code>getline</code> function that we used in our code.</p> <p>Working with files in C++ can be a bit more complex than working with simple variables and data structures, but it provides a powerful way to store and retrieve data permanently.</p> <p>Example 1.1.7:</p> <p>First, create the file \"Files\\inputFile.txt\" and place your input like this:</p> <pre><code>6\n21.983\nH\n</code></pre> <p>Then we write our program:</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;fstream&gt;\nint main(){\n// Create ifstream and ofstream objects\nstd::ifstream inputFile(\"Files\\\\inputFile.txt\");\nstd::ofstream outputFile(\"Files\\\\outputFile.txt\");\nint x;\ndouble y;\nchar z;\noutputFile &lt;&lt; \"Input Section:\" &lt;&lt; std::endl;\noutputFile &lt;&lt; \"Enter an int value: \";\ninputFile &gt;&gt; x;\noutputFile &lt;&lt; x &lt;&lt; std::endl;\noutputFile &lt;&lt; \"Enter a double value: \";\ninputFile &gt;&gt; y;\noutputFile &lt;&lt; y &lt;&lt; std::endl;\noutputFile &lt;&lt; \"Enter a character: \";\ninputFile &gt;&gt; z;\noutputFile &lt;&lt; z &lt;&lt; std::endl;\noutputFile &lt;&lt; \"-------------------------------------\" &lt;&lt; std::endl;\noutputFile &lt;&lt; \"Output Section:\" &lt;&lt; std::endl;\noutputFile &lt;&lt; \"int value is: \" &lt;&lt; x &lt;&lt; std::endl;\noutputFile &lt;&lt; \"double value is: \" &lt;&lt; y &lt;&lt; std::endl;\noutputFile &lt;&lt; \"character value is: \" &lt;&lt; z &lt;&lt; std::endl;\noutputFile &lt;&lt; \"-------------------------------------\" &lt;&lt; std::endl;\n// Close the files \ninputFile.close(); outputFile.close();\nreturn 0;\n}\n</code></pre> <p>Output:</p> <pre><code>Input Section:\nEnter an int value: 6\nEnter a double value: 21.983\nEnter a character: H\n-------------------------------------\nOutput Section:\nint value is: 6\ndouble value is: 21.983\ncharacter value is: H\n-------------------------------------\n</code></pre> <p>This code is a basic example of reading and writing data to and from files in C++. </p> <p>The code:</p> <ul> <li>Includes two libraries, <code>iostream</code> and <code>fstream</code>, which are used for input/output operations.</li> <li>In the <code>main</code> function, two objects, <code>inputFile</code> and <code>outputFile</code>, are created using the <code>ifstream</code> and <code>ofstream</code> classes respectively. These objects are used to open two files, <code>inputFile.txt</code> and <code>outputFile.txt</code>, that are located in a directory called \"Files\".</li> <li>The code then declares three variables, <code>x</code>, <code>y</code>, and <code>z</code>, which are used to store the input data read from the input file.</li> <li>The <code>outputFile</code> object is then used to write some text to the output file, including prompts for the user to enter an integer, double, and character, respectively.</li> <li>The <code>inputFile</code> object is then used to read these values from the input file, which are then written to the output file using the <code>outputFile</code> object.</li> <li>Finally, the code closes both files and return 0 to indicate successful execution.</li> </ul> <p>Note: That you need to create the <code>inputFile.txt</code> with the necessary input before running your code.</p>"},{"location":"cpp_array/","title":"C++ Arrays","text":""},{"location":"cpp_array/#introduction","title":"Introduction","text":"<p>An array is a collection of elements of the same data type, stored in contiguous memory locations. Arrays are used to store multiple values of the same type in a single variable.</p>"},{"location":"cpp_array/#cpp-array-declaration","title":"cpp Array Declaration","text":"<p>Syntax:</p> <pre><code>dataType arrayName[arraySize];\n</code></pre> <p>Example 1.4.1:</p> <pre><code>int x[6];\n</code></pre> <p>Here,</p> <ul> <li><code>int</code> - type of element to be stored.</li> <li><code>x</code> - name of the array.</li> <li><code>6</code> - size of the array.</li> </ul>"},{"location":"cpp_array/#access-elements-in-cpp-array","title":"Access Elements in cpp Array","text":"<p>In C++, each element in an array is associated with a number. The number is known as an array index. We can access elements of an array by using those indices.</p> <p>Syntax:</p> <pre><code>// syntax to access array elements\narray[index];\n</code></pre> <p>Consider the array <code>x</code> we have seen above:</p> <p> Switch...case Statement Flowchart</p> <p>Few things to remember</p> <ul> <li>The array indices start with <code>0</code>. Meaning <code>x[0]</code> is the first element stored at index <code>0</code>.</li> <li>If the size of an array is <code>n</code>, the last element is stored at index <code>(n-1)</code>. In this example, <code>x[5]</code> is the last element.</li> <li>Elements of an array have consecutive addresses. For example, suppose the starting address of <code>x[0]</code> is 2120d. Then, the address of the next element <code>x[1]</code> will be 2124d, the address of <code>x[2]</code> will be 2128d and so on.</li> </ul> <p>Here, the size of each element has increased by 4. This is because the size of <code>int</code> is 4 bytes.</p> <p>Example 1.5.1:</p> <pre><code>#include &lt;iostream&gt;\nint main(){\n// Declare an array of size 5\nint myArray[5];\n// Assign values to the array\nmyArray[0] = 1;\nmyArray[1] = 2;\nmyArray[2] = 3;\nmyArray[3] = 4;\nmyArray[4] = 5;\n// Print the values of the array\nfor (int i = 0; i &lt; 5; i++) {\nstd::cout &lt;&lt; \"myArray[\" &lt;&lt; i &lt;&lt; \"]: \" &lt;&lt; myArray[i] &lt;&lt; std::endl;\n}\nreturn 0;\n}\n</code></pre> <p>Output:</p> <pre><code>myArray[0]: 1\nmyArray[1]: 2\nmyArray[2]: 3\nmyArray[3]: 4\nmyArray[4]: 5\n</code></pre> <p>In this code:</p> <ul> <li>An array called <code>myArray</code> is declared with a size of <code>5</code>.</li> <li>Then, values are assigned to each element of the array using the array index.</li> <li>Finally, a <code>for</code> loop is used to print the values of the array.</li> </ul>"},{"location":"cpp_array/#cpp-array-initialization","title":"cpp Array Initialization","text":"<p>In C++, it's possible to initialize an array during declaration.</p> <p>Syntax:</p> <pre><code>// declare and initialize an array\ndataType arrayName[arraySize] = {element1, element2, ....};\n</code></pre> <p> Switch...case Statement Flowchart</p> <p>Another method to initialize array is during declaration:</p> <pre><code>dataType arrayName[] = {element1, element2, ....};\n</code></pre> <p>Here, we have not mentioned the size of the array. In such cases, the compiler automatically computes the size.</p> <p>Example 1.5.2:</p> <pre><code>#include &lt;iostream&gt;\nint main(){\n// Declare and initialize an array\nint myArray[] = {1, 2, 3, 4, 5};\n// Print the values of the array\nfor (int i = 0; i &lt; 5; i++) {\nstd::cout &lt;&lt; \"myArray[\" &lt;&lt; i &lt;&lt; \"]: \" &lt;&lt; myArray[i] &lt;&lt; std::endl;\n}\nreturn 0;\n}\n</code></pre> <p>Output:</p> <pre><code>myArray[0]: 1\nmyArray[1]: 2\nmyArray[2]: 3\nmyArray[3]: 4\nmyArray[4]: 5\n</code></pre> <p>This code is the same as the one before, only in here we used the <code>{}</code> notation to initialize an array with a set of values while declaring it.</p>"},{"location":"cpp_array/#cpp-array-with-empty-members","title":"cpp Array With Empty Members","text":"<p>In C++, if an array has a size of <code>n</code>, we can store up to <code>n</code> number of elements in the array. However, what will happen if we store less than <code>n</code> number of elements?</p> <p>In such cases, the compiler assigns random values to the remaining places.</p> <p>Oftentimes, this random value is simply <code>0</code>.</p> <p> Switch...case Statement Flowchart</p>"},{"location":"cpp_array/#cpp-array-out-of-bounds","title":"cpp Array Out of Bounds","text":"<p>If we declare an array of size <code>10</code>, then the array will contain elements from index <code>0</code> to <code>9</code>.</p> <p>However, if we try to access the element at index <code>10</code> or more than <code>10</code>, it will result in an \"Undefined Behavior\".</p>"},{"location":"cpp_conditional_statements/","title":"C++ Conditional Statements","text":""},{"location":"cpp_conditional_statements/#introduction","title":"Introduction","text":"<p>Conditional statements in C++ allow you to control the flow of a program based on certain conditions. The basic for of a conditional statement is an <code>if</code> statement. We use the <code>if</code> statement to run a block of code only when a certain condition is met.</p> <p>There are three forms of <code>if...else</code> statements in C++.</p> <ol> <li><code>if</code> Statement.</li> <li><code>if...else</code> Statement.</li> <li><code>if...else if...else</code> Statement.</li> </ol>"},{"location":"cpp_conditional_statements/#cpp-if-statement","title":"cpp if Statement","text":"<p>Syntax:</p> <pre><code>if (condition) {\n// body of if statement\n}\n</code></pre> <p>The <code>condition</code> is a Boolean expression that is evaluated to either true or false.</p> <ul> <li>If the <code>condition</code> evaluates to <code>true</code>, the code inside the body of <code>if</code> is executed.</li> <li>If the <code>condition</code> evaluates to <code>false</code>, the code inside the body of <code>if</code> is skipped.</li> </ul>"},{"location":"cpp_conditional_statements/#cpp-ifelse-statement","title":"cpp if...else Statement","text":"<p>Syntax:</p> <pre><code>if (condition) {\n// block of code if condition is true\n}\nelse {\n// block of code if condition is false\n}\n</code></pre> <p>The <code>if...else</code> allows you to specify code that should be executed if the condition is false.</p> <p>If the <code>condition</code> evaluates to <code>true</code>:</p> <ul> <li>the code inside the body of <code>if</code> is executed.</li> <li>the code inside the body of <code>else</code> is skipped from execution.</li> </ul> <p>If the <code>condition</code> evaluates to <code>false</code>:</p> <ul> <li>the code inside the body of <code>if</code> is skipped from execution.</li> <li>the code inside the body of <code>else</code> is executed.</li> </ul>"},{"location":"cpp_conditional_statements/#cpp-ifelse-ifelse-statement","title":"cpp if...else if...else Statement","text":"<p>Syntax:</p> <pre><code>if (condition1) {\n// code block 1\n}\nelse if (condition2) {\n// code block 2\n}\nelse {\n// code block 3\n}\n</code></pre> <p>Here,</p> <ul> <li>If <code>condition1</code> evaluates to <code>true</code>, the <code>code block 1</code> is executed.</li> <li>If <code>condition1</code> evaluates to <code>false</code>, then <code>condition2</code> is evaluated.</li> <li>If <code>condition2</code> evaluates to <code>true</code>, the <code>code block 2</code> is executed.</li> <li>If <code>condition2</code> evaluates to <code>false</code>, the <code>code block 3</code> is executed.</li> </ul>"},{"location":"cpp_conditional_statements/#cpp-nested-ifelse","title":"cpp Nested if...else","text":"<p>Syntax:</p> <pre><code>// outer if statement\nif (condition1) {\n// statements\n// inner if statement\nif (condition2) {\n// statements\n}\n}\n</code></pre> <p>Here,</p> <ul> <li>If <code>condition1</code> evaluates to <code>true</code>, the statements inside the outer if will be executed and the <code>condition2</code> will be evaluated.</li> <li>If <code>condition2</code> evaluates to <code>true</code>, the statements inside the inner if will be executed (Both outer and inner statements were executed).</li> <li>If <code>condition2</code> evaluates to <code>false</code>, then the block will be skipped (Only outer statement were executed).</li> <li>If <code>condition1</code> evaluates to <code>false</code>, then the block will be skipped (No statement will be executed).</li> </ul>"},{"location":"cpp_conditional_statements/#ternary-operator","title":"Ternary Operator","text":"<p>C++ also provide a ternary operator <code>? :</code> which is a shorthand for <code>if...else</code> statement and it is used to make the code more readable.</p> <p>Syntax:</p> <pre><code>variable = (condition) ? value1 : value2;\n</code></pre> <p>The above line of code can be read as \"if <code>condition</code> is <code>true</code> then assign <code>value1</code> to variable else assign <code>value2</code> to variable.\"</p> <p>Example 1.3.1:</p> <pre><code>#include &lt;iostream&gt;\nint main(){\nint a = 5;\nint b = 10;\nint c;\nc = (a &gt; b) ? a : b;\nstd::cout &lt;&lt; \"c: \" &lt;&lt; c &lt;&lt; std::endl;\nreturn 0;\n}\n</code></pre> <p>Output:</p> <pre><code>c: 10\n</code></pre> <p>In this code:</p> <ul> <li>The program will compare the value of <code>a</code> and <code>b</code>.</li> <li>If the value of <code>a</code> is greater than <code>b</code>, then <code>c</code> will be assigned the value of <code>a</code>.</li> <li>Otherwise <code>c</code> will be assigned the value of <code>b</code>.</li> </ul> <p>Note: Ternary operator should be used with caution, as it can make the code harder to read and understand if overused or used in complex expressions.</p> <p>Conditional statements are fundamental building block of many programs and they allow you to create more complex logic and decision making in your code.</p>"},{"location":"cpp_data_types/","title":"C++ Data Types","text":""},{"location":"cpp_data_types/#introduction","title":"Introduction","text":"<p>In C++, data types are used to define the type of a variable, which determines the size and layout of the variable's memory, as well as the set of operations that can be performed on it.</p>"},{"location":"cpp_data_types/#cpp-fundamental-data-types","title":"cpp Fundamental Data Types","text":"<p>The table below shows the fundamental data types, their meaning, and their sizes (in bytes):</p> Data Types Meaning Size (in Bytes) <code>int</code> Integer 2 or 4 <code>float</code> Floating-point 4 <code>double</code> Double Floating-point 8 <code>char</code> Character 1 <code>wchar_t</code> Wide Character 2 <code>bool</code> Boolean 1 <code>void</code> Empty 0"},{"location":"cpp_data_types/#cpp-type-modifiers","title":"cpp Type Modifiers","text":"<p>We can further modify some of the fundamental data types by using types modifiers.</p> <p>There are 4 types modifiers in C++. These are:</p> <ol> <li><code>signed</code></li> <li><code>unsigned</code></li> <li><code>short</code></li> <li><code>long</code></li> </ol> <p>We can modify the following types with the above modifiers:</p> <ul> <li><code>int</code></li> <li><code>double</code></li> <li><code>char</code></li> </ul>"},{"location":"cpp_data_types/#cpp-modifiers-data-types-list","title":"cpp Modifiers Data Types List","text":"Data Type Size (in Bytes) Meaning <code>signed int</code> 4 used for integers (equivalent to int) <code>unsigned int</code> 4 can only store positive integers <code>short</code> 2 used for small integers (range -32768 to 32767) <code>unsigned short</code> 2 used for small integers (range 0 to 65,535) <code>long</code> at least 4 used for large integers (equivalent to long int) <code>unsigned long</code> 4 used for large positive integers or 0 (equivalent to unsigned long int) <code>long long</code> 8 used for very large integers (equivalent to long long int) <code>unsigned long long</code> 8 used for very large integers or 0 (equivalent to unsigned long long int) <code>long double</code> 12 used for large floating-point numbers <code>singed char</code> 1 used for character (guaranteed range -127 to 127) <code>unsigned char</code> 1 used for characters (range 0 to 255) <p>Let's see a few examples:</p> <p>Example 1.2.1:</p> <pre><code>long b = 4523232;\nlong int c = 2345342;\nlong double d = 233434.56343;\nshort d = 3434233; // Error! out of range\nunsigned int a = -5;    // Error! can only store positive numbers or 0\n</code></pre>"},{"location":"cpp_data_types/#auto-specifier","title":"Auto specifier","text":"<p>The <code>auto</code> specifier is a way of detecting the data type base on assignment value.</p> <p>Example 1.2.2:</p> <pre><code>auto i = 5;   // causes i to be of type int\n// and\nauto j = 5.0; // causes j to be of type double.\n</code></pre>"},{"location":"cpp_data_types/#derived-data-types","title":"Derived Data Types","text":"<ul> <li>arrays.</li> <li>pointers.</li> <li>function types.</li> <li>structures.</li> </ul>"},{"location":"cpp_switch_statement/","title":"C++ Switch Statement","text":""},{"location":"cpp_switch_statement/#introduction","title":"Introduction","text":"<p>In C++, the <code>switch...case</code> statement is used to perform different actions base on the value of a single expression.</p>"},{"location":"cpp_switch_statement/#cpp-switchcase-statement","title":"cpp switch...case Statement","text":"<p>Syntax:</p> <pre><code>switch (expression) {\ncase constant1:\n/* code to be executed if\n        expression is equal to constant1; */\nbreak;\ncase constant2:\n/* code to be executed if\n        expression is equal to constant2 */\nbreak;\ndefault:\n/* code to be executed if\n        expression doesn't match any constant */\n}\n</code></pre> <p>The <code>expression</code> is evaluated and compared to the values specified in each <code>case</code> statement.  - If a match is found, the corresponding code block is executed. - If no match is found, the code in the <code>default</code> block is executed.</p> <p>Notice that the <code>break</code> statement is used inside each <code>case</code> block. This terminates the <code>switch</code> statement.</p> <p>If the <code>break</code> statement is not used, all cases after the correct <code>case</code> will be executed, which is NOT what we want!</p>"},{"location":"cpp_switch_statement/#flowchart-of-switchcase-statement","title":"Flowchart of switch...case Statement","text":"<p> Switch...case Statement Flowchart</p> <p>Note: The expression used in the switch statement can be of type <code>int</code>, <code>char</code>, <code>enum</code> and <code>string</code> (c++17 and later) and the case label can be constant expressions like integer, character and enumeration.</p> <p>Example 1.4.1:</p> <pre><code>#include &lt;iostream&gt;\nint main(){\nint x = 2;\nswitch (x) {\ncase 1:\nstd::cout &lt;&lt; \"x is 1\" &lt;&lt; std::endl;\nbreak;\ncase 2:\nstd::cout &lt;&lt; \"x is 2\" &lt;&lt; std::endl;\nbreak;\ncase 3:\nstd::cout &lt;&lt; \"x is 3\" &lt;&lt; std::endl;\nbreak;\ndefault:\nstd::cout &lt;&lt; \"x is not 1, 2, or 3\" &lt;&lt; std::endl;\n}\nreturn 0;\n}\n</code></pre> <p>Output:</p> <pre><code>x is 2\n</code></pre> <p>In this code:</p> <ul> <li>The variable <code>x</code> is assigned the value of <code>2</code>.</li> <li>Then, the <code>switch</code> statement is used to check the value of <code>x</code>.</li> <li>The <code>switch</code> statement checks for a match between the value of <code>x</code> and the cases inside the switch statement.</li> <li>When a match is found, the corresponding code block is executed.</li> </ul> <p>The <code>switch</code> statement is useful when you have a single expression that can have multiple possible values, and you want to perform different actions based on the value of that expression. It's an alternative to multiple <code>if...else</code> statements, and it can make your code more readable and efficient.</p>"}]}